/*
 * Copyright 2015 Kantega AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kantega.respiro.collector.jdbc;

import org.kantega.respiro.collector.Collector;
import org.kantega.respiro.jdbc.proxy.ProxyConnection;

import java.sql.*;

/**
 *
 */
public class CollectingConnection extends ProxyConnection {
    String url = "";

    public CollectingConnection(Connection connection) {
        super(connection);

        try {
            url = connection.getMetaData().getURL();
        }
        catch (SQLException e) {
        }
    }

    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareStatement(sql);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareStatement(sql, resultSetType, resultSetConcurrency);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareStatement(sql, columnIndexes);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareStatement(sql, autoGeneratedKeys);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        Collector.getCurrent().ifPresent(e -> e.addBackendMessage(new JdbcExchangeMessage(url,sql)));
        return super.prepareStatement(sql, columnNames);
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new CollectingStatement(super.createStatement());
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new CollectingStatement(super.createStatement(resultSetType, resultSetConcurrency));
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new CollectingStatement(super.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability));
    }
}
